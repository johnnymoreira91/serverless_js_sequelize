org: johnnymoreira
app: bank-api
service: sls-bank-js
frameworkVersion: '3'

package:
  excludeDevDependencies: true

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

# serverless-offline:
#     noPrependStageInUrl: true
#     noAuth: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs14.x
  timeout: 10
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'

resources:
  Resources:
    bankuploaduser:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: bankuploaduser
        AccessControl: PublicRead
    UploadRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: upload-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource:
                    !Sub
                      - "arn:aws:s3:::${BucketName}/*"
                      - {BucketName: !Ref bankuploaduser}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    Fn::Sub:
                      - arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/*:*:*
                      - { Region: !Ref AWS::Region, AccountId: !Ref AWS::AccountId }

functions:

  authorize:
    handler: functions/authorize.handler

  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get
          cors:
            origin: '*'
  seed:
    handler: functions/seed.handler
    events:
      - http:
          path: /seed
          method: get  
          cors:
            origin: '*'
  login:
    handler: functions/auth/login.handler
    events:
      - http:
          path: /login
          method: post
          cors:
            origin: '*'
  createUser:
    handler: functions/user/create.handler
    events:
      - http:
          path: /user
          method: post
          cors:
            origin: '*'
  list:
    handler: functions/user/list.handler
    events:
      - http:
          path: /user
          method: get
          authorizer: authorize
          cors:
            origin: '*'
  getUserById:
    handler: functions/user/getById.handler
    events:
      - http:
          path: /user/{id}
          method: get
          authorizer: authorize
          cors:
            origin: '*'
  updateUser:
    handler: functions/user/update.handler
    events:
      - http:
          path: /user/{id}
          method: put
          authorizer: authorize
          cors:
            origin: '*'
  uploadDocsUser:
    handler: functions/user/uploadDoc.handler
    role: UploadRole
    environment:
      BUCKET: modusland${opt:stage, 'dev'}
    events:
      - http:
          path: /user/file/upload
          method: post
          authorizer: authorize
          cors:
            origin: '*'